datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum ImportStatus {
  RECEIVED
  PARSED
  VALIDATED
  APPLIED
  FAILED
}

enum RowStatus {
  PENDING
  VALID
  ERROR
  SKIPPED
  IMPORTED
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  password         String
  name             String?
  refreshTokenHash String?
  createdAt        DateTime      @default(now())
  accounts         Account[]
  categories       Category[]
  budgets          Budget[]
  imports          ImportBatch[]
  txs              Transaction[] @relation("TxUser")
}

model Currency {
  code     String    @id @db.VarChar(3) // ISO 4217 (USD, ARS, EUR)
  name     String
  symbol   String?
  decimals Int       @default(2)
  accounts Account[]
}

model Account {
  id           String        @id @default(cuid())
  userId       String
  name         String
  currencyCode String?       @db.VarChar(3) // PASO 1: opcional
  currency     Currency?     @relation(fields: [currencyCode], references: [code])
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  txs          Transaction[]
  imports      ImportBatch[]

  @@unique([userId, name])
  @@index([currencyCode])
}

model Category {
  id      String        @id @default(cuid())
  userId  String
  name    String
  type    CategoryType
  user    User          @relation(fields: [userId], references: [id])
  txs     Transaction[]
  budgets Budget[]

  @@unique([userId, name, type])
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  accountId   String
  categoryId  String
  amount      Decimal  @db.Decimal(18, 2)
  date        DateTime
  note        String?
  receiptUrl  String?
  dedupeHash  String?  @db.VarChar(64)
  importRowId String?  @unique
  createdAt   DateTime @default(now())

  user      User       @relation("TxUser", fields: [userId], references: [id])
  account   Account    @relation(fields: [accountId], references: [id])
  category  Category   @relation(fields: [categoryId], references: [id])
  importRow ImportRow? @relation("TransactionImportRow", fields: [importRowId], references: [id])

  @@unique([userId, dedupeHash])
  @@index([userId, date])
  @@index([accountId, date])
}

model Budget {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  period     String   @db.VarChar(20)
  amount     Decimal  @db.Decimal(18, 2)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId, period])
  @@index([userId, period])
}

model ImportBatch {
  id          String       @id @default(cuid())
  userId      String
  accountId   String?
  filename    String
  mimeType    String
  sizeBytes   Int
  status      ImportStatus @default(RECEIVED)
  columnMap   Json
  delimiter   String?
  worksheet   String?
  parsedRows  Int          @default(0)
  validRows   Int          @default(0)
  errorRows   Int          @default(0)
  appliedRows Int          @default(0)
  createdAt   DateTime     @default(now())
  appliedAt   DateTime?
  user        User         @relation(fields: [userId], references: [id])
  account     Account?     @relation(fields: [accountId], references: [id])
  rows        ImportRow[]

  @@index([userId, createdAt])
}

model ImportRow {
  id           String        @id @default(cuid())
  batchId      String
  raw          Json
  date         DateTime?
  amount       Decimal?      @db.Decimal(18, 2)
  note         String?
  categoryName String?
  categoryType CategoryType?
  status       RowStatus     @default(PENDING)
  error        String?
  dedupeHash   String?       @db.VarChar(64)
  createdAt    DateTime      @default(now())

  batch       ImportBatch  @relation(fields: [batchId], references: [id])
  transaction Transaction? @relation("TransactionImportRow")

  @@index([batchId, status])
  @@index([dedupeHash])
}
